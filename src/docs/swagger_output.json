{
  "swagger": "2.0",
  "info": {
    "title": "Split API",
    "description": "API for split",
    "version": "1.0.0"
  },
  "host": [
    "api.split-app.fr"
  ],
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Enter your Bearer token in the format **Bearer &lt;token&gt;**"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/auth/apple/": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Authentification avec apple voir la réponse, si needStepTwo = true dans ce cas tu affiches une page pour demander username firstname et lastname et tu fais apple a l",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "identityToken": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication",
            "schema": {
              "type": "object",
              "properties": {
                "needStepTwo": {
                  "type": "string",
                  "example": "true"
                },
                "user": {
                  "$ref": "#/definitions/User"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/auth/google/": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Authentification avec google voir la réponse, si needStepTwo = true dans ce cas tu affiches une page pour demander username firstname et lastname et tu fais apple a l",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "identityToken": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication",
            "schema": {
              "type": "object",
              "properties": {
                "needStepTwo": {
                  "type": "string",
                  "example": "true"
                },
                "user": {
                  "$ref": "#/definitions/User"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/auth/from-provider/step-two": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Seconde route une fois que tu as utilisé la première route pour utiliser un service tiers, elle attend les infos complémentaires pour que le compte soit valide",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Informations nécessaires pour compléter le compte utilisateur",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "johndoe123"
                },
                "firstname": {
                  "type": "string",
                  "example": "John"
                },
                "lastname": {
                  "type": "string",
                  "example": "Doe"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication",
            "schema": {
              "type": "object",
              "properties": {
                "needStepTwo": {
                  "type": "string",
                  "example": "true"
                },
                "user": {
                  "$ref": "#/definitions/User"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/user/me": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Get all information of the connected user.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User information retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized. No valid token provided.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 401
                },
                "msg": {
                  "type": "string",
                  "example": "Unauthorized."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/user/": {
      "delete": {
        "tags": [
          "User"
        ],
        "description": "Delete an User.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User information deleted successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string",
                  "example": ""
                },
                "status": {
                  "type": "number",
                  "example": 200
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized. No valid token provided.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 401
                },
                "msg": {
                  "type": "string",
                  "example": "Unauthorized."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/user/register": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Register a new user.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User registration data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/user/update": {
      "put": {
        "tags": [
          "User"
        ],
        "description": "Update user details.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "User update data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 404
                },
                "msg": {
                  "type": "string",
                  "example": "User not found."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "422": {
            "description": "Unprocessable entity.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 422
                },
                "msg": {
                  "type": "string",
                  "example": "Required fields missing."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/user/image": {
      "delete": {
        "tags": [
          "User"
        ],
        "description": "Delete user image.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 404
                },
                "msg": {
                  "type": "string",
                  "example": "User not found."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "422": {
            "description": "Unprocessable entity.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 422
                },
                "msg": {
                  "type": "string",
                  "example": "Required fields missing."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/user/check/username/{username}": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Check if username already use.",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "username to check"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "User login.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User login data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "user@example.com"
                },
                "password": {
                  "type": "string",
                  "example": "Password123"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User login successful.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/user/friends": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Get user friends.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User friends retrieved successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/user/refresh-token/{refreshToken}": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Refresh user token.",
        "parameters": [
          {
            "name": "refreshToken",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Refresh token"
          }
        ],
        "responses": {
          "200": {
            "description": "User token refreshed successfully.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized. No valid token provided.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 401
                },
                "msg": {
                  "type": "string",
                  "example": "Aucun token valide trouvé."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    }
  },
  "definitions": {
    "Expense": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Expense name"
        },
        "payBy": {
          "$ref": "#/definitions/User"
        },
        "date": {
          "type": "string",
          "example": "2024-06-03"
        },
        "editedAt": {
          "type": "string",
          "example": "2024-06-03"
        },
        "amount": {
          "type": "number",
          "example": 100.5
        },
        "imageLink": {
          "type": "string",
          "example": "https://example.com/image.jpg"
        },
        "group": {
          "$ref": "#/definitions/Group"
        },
        "expenseParticipations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExpenseParticipation"
          }
        },
        "isRefund": {
          "type": "boolean",
          "example": true
        },
        "currency": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "ExpenseParticipation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "participant": {
          "$ref": "#/definitions/User"
        },
        "amount": {
          "type": "number",
          "example": 50.25
        },
        "imageLink": {
          "type": "string",
          "example": "https://example.com/image.jpg"
        },
        "expense": {
          "$ref": "#/definitions/Expense"
        }
      }
    },
    "Friends": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "user1": {
          "$ref": "#/definitions/User"
        },
        "user2": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "FriendsRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "asker": {
          "$ref": "#/definitions/User"
        },
        "receiver": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "Group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "owner": {
          "$ref": "#/definitions/User"
        },
        "name": {
          "type": "string",
          "example": "Group name"
        },
        "currency": {
          "type": "string",
          "example": "USD"
        },
        "showShareCard": {
          "type": "boolean",
          "example": true
        },
        "imageLink": {
          "type": "string",
          "example": "https://example.com/image.jpg"
        },
        "participants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    },
    "PaymentMethod": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Payment method name"
        },
        "value": {
          "type": "string",
          "example": "Payment method value"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        },
        "username": {
          "type": "string",
          "example": "johndoe"
        },
        "email": {
          "type": "string",
          "example": "john.doe@gmail.com"
        },
        "isCompleted": {
          "type": "boolean",
          "example": true
        },
        "imageLink": {
          "type": "string",
          "example": "https://example.com/image.jpg"
        },
        "isGuest": {
          "type": "boolean",
          "example": false
        }
      }
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}